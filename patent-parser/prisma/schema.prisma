generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

/// Патент
model Patent {
  /// Номер патента
  id              String    @id
  /// Ссылка на патент в Google Patents
  urlGoogle       String?
  /// Ссылка на патент в Yandex Patents
  urlYandex       String?
  /// Название патента
  title           String?
  /// Краткое описание
  abstract        String?
  /// Полное описание
  description     String?
  /// Области технологий, классификации по патентным системам (например, IPC или CPC)
  classifications Json? // TODO
  /// Пункты формулы изобретения
  claims          Json?
  /// Концепты
  concepts        Concept[]

  /// Ссылки на другие патенты
  relations PatentRelation[]
}

/// Тип связи от первого патента ко второму
enum PatentRelationTypeEnum {
  /// Цитирует
  Citation
  /// Цитирует (по семьям)
  CitationFamilyToFamily
  /// Процитирован в
  CitedBy
  /// Процитирован в (по семьям)
  CitedByFamilyToFamily
  /// По миру
  Worldwide
  /// Похожие документы
  SimilarDocument
}

/// Связь между патентами
model PatentRelation {
  /// Первый патент
  patentMain    Patent                 @relation(fields: [patentMainId], references: [id], onDelete: Cascade)
  /// Первый патент
  patentMainId  String
  /// Тип связи
  type          PatentRelationTypeEnum
  /// Второй патент (может отсутствовать в БД)
  patentOtherId String

  @@id([type, patentMainId, patentOtherId])
}

/// Концепт
model Concept {
  id         String   @id @default(dbgenerated("uuid_generate_v4()"))
  name       String
  domain     String
  smiles     String?
  inchiKey   String?
  queryMatch Float
  sections   String[]
  count      Int

  Patent       Patent? @relation(fields: [patentNumber], references: [id], onDelete: Cascade)
  patentNumber String?
}

model ApplicationEvent {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  date      DateTime @db.Timestamptz()
  asignee   String
  inventors String[]
}

model PatentParseQueue {
  /// Ссылка на патент
  url       String    @id
  /// Когда началась обработка (в случае истечения ожидания, можно начать снова)
  startedAt DateTime? @db.Timestamptz
  /// Кол-во попыток обработки
  tries     Int       @default(0)

  // Служебные поля
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}
