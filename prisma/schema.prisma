generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

/// Патент
model PatentGoogle {
  /// Номер патента
  id                   String  @id
  /// Ссылка на патент в Google Patents
  url                  String  @unique
  // /// Название патента
  title                String?
  /// Правообладатель
  assignee             String?
  /// Изобретатель или Автор
  inventorOrAuthor     String?
  /// Дата приоритета
  priorityDate         String? // YYYY-MM-DD
  /// Дата подачи заявки или создания
  filingOrCreationDate String? // YYYY-MM-DD
  /// Дата публикации
  publicationDate      String? // YYYY-MM-DD
  /// Дата выдачи патента
  grantDate            String? // YYYY-MM-DD
  /// Краткое описание
  abstract             String?
  /// Полное описание
  description          String?
  /// Области технологий, классификации по патентным системам (например, IPC или CPC)
  classifications      Json?
  /// Пункты формулы изобретения
  claims               Json?
  /// Концепты
  concepts             Json?
  /// Связи с другими патентами
  relations            Json?
  /// Список событий
  applicationEvents    Json?

  // Служебные поля
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

model PatentYandex {
  id              String   @id
  url             String   @unique
  title           String?
  authors         String[]
  assignees       String[]
  applicationDate String? // YYYY-MM-DD
  publishedDate   String? // YYYY-MM-DD
  abstract        String?
  claims          String?
  description     String?
  classifications String[]
  relations       Json?
  fipsUrl         String?

  // Служебные поля
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

model Article {
  url           String  @id
  title         String?
  journalName   String?
  authors       Json?
  organizations Json?
  date          String? // YYYY-MM-DD
  abstract      String?
  pdfUrl        String?

  // Служебные поля
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

/// Временная таблица Патента с извл. данными при поиске перед парсингом
model PatentGoogleTemp {
  id                   String  @id
  url                  String  @unique
  title                String?
  assignee             String?
  inventorOrAuthor     String?
  priorityDate         String? // YYYY-MM-DD
  filingOrCreationDate String? // YYYY-MM-DD
  publicationDate      String? // YYYY-MM-DD
  grantDate            String? // YYYY-MM-DD
}

enum QueueElementTypeEnum {
  GooglePatent
  YandexPatent
  ArticleRU
  ArticleEN
}

model QueueElement {
  /// Ссылка
  url       String               @id
  /// Тип элемента в очереди
  type      QueueElementTypeEnum
  /// Когда началась обработка (в случае истечения ожидания, можно начать снова)
  startedAt DateTime?            @db.Timestamptz
  /// Кол-во попыток обработки
  tries     Int                  @default(0)
  /// Приоритет
  priority  Int                  @default(0)

  // Служебные поля
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}
